---
- name: Determine if the user {{ primary_domain_user }} exist.
  shell: grep {{ primary_domain_user }} /etc/passwd |  awk -F":" '{print $3}'
  changed_when: false
  register: existing_user_domain

- name: Determine if the group {{ primary_domain_user }} exist.
  shell: grep {{ primary_domain_user }} /etc/group |  awk -F":" '{print $3}'
  changed_when: false
  register: existing_group_domain

- name: Check Group/User {{ primary_domain_user }} exist
  fail:
    msg: "Group/User {{ primary_domain_user }} exists on this server."
  when: existing_user_domain.stdout != "" and existing_group_domain.stdout != ""

# - set_fact:
#     primary_domain_id: "{{ (3100,3299) | random }}"
#     until: primary_domain_id not in primary_domain_id_remind

# - set_fact:
#     primary_domain_id_remind: "{{ primary_domain_id }}"

# - name:  Generate UID & GUID
#   block:
- name: Determine if the user id {{ primary_domain_id }} exists.
  shell: grep {{ primary_domain_id }} /etc/passwd |  awk -F":" '{print $3}'
  changed_when: false
  register: existing_user
- name: Determine if the group id {{ primary_domain_id }} exists.
  shell: grep {{ primary_domain_id }} /etc/group |  awk -F":" '{print $3}'
  changed_when: false
  register: existing_group
- name: Check GUID/UID if exist
  fail:
    msg: "GUID {{ primary_domain_id }} / UID {{ primary_domain_id }} exists on this server."
  when: existing_group.stdout != "" and existing_user.stdout != ""
  # - debug:
  #     msg: "{{ primary_domain_id }}"
  # rescue:
  #   - include_role: { role: ansible-useradd }